#!/usr/bin/python3

from tinydb import TinyDB, Query
import datetime
import csv
import argparse
import sys
import shutil
import os


def nr_elements_in_db():
    return print(f"Number of elements in database: " + str(db.__len__()))


def format_result(ips):
    return print("{} {} {}".format(*ips))


def read_old_scan():
    try:
        od = sorted(db.all(), key=lambda k: k["scan_id"])
        sid = "{scan_id}".format(**od[-1])
    except IndexError:
        sid = 0

    oscan = Query()
    for result in db.search(oscan.scan_id == int(sid)):
        # old_scan.append({"ip": result.get("ip_address"), "port": result.get("port"), "prot": result.get("protocol")})
        old_scan.add((result.get("ip_address"), result.get("port"), result.get("protocol")))
    return sid


def read_new_scan(scan_file, sid):
    try:
        with open(scan_file) as csvfile:
            scan_reader = csv.DictReader(csvfile, delimiter=',', quotechar='"')

            if scan_reader.fieldnames[0] == 'ip_address':
                new_sid = int(sid)+1

                for row in scan_reader:
                    row.update({"date": timestamp, "scan_id": new_sid})
                    db.insert(row)

                # new_scan.append({"ip": row.get("ip_address"), "port": row.get("port"), "prot": row.get("protocol")})
                    new_scan.add((row.get("ip_address"), row.get("port"), row.get("protocol")))
            else:
                sys.exit("It's not a report file")
    except (FileNotFoundError, PermissionError, IsADirectoryError):
        sys.exit("Wrong file")


def compare_scans():
    if old_scan.__len__() != 0:
        if old_scan == new_scan:
            print()
            print("======================================")
            print(" No changes comparing to the old scan ")
            print("======================================")
            print()
            nr_elements_in_db()
        else:
            gone_ips = old_scan.difference(new_scan)
            new_ips = new_scan.difference(old_scan)

            print()
            print("format:")
            print("IP PORT PROTOCOL")
            print()

            print("DELETED:")
            print("=====================================")
            for gone_ip in gone_ips:
                format_result(gone_ip)
            print()

            print("NEW:")
            print("=====================================")
            for new_ip in new_ips:
                format_result(new_ip)
            print()

            nr_elements_in_db()
    else:
        print("Initial import. I have nothing to compare with.")
        nr_elements_in_db()
    return


def move_to_arch():
    try:
        shutil.move(args.i, folder_arch + "/Report-R7-" + timestamp + ".csv")
    except PermissionError:
        sys.exit("Permission Error")


def prepare_environment():
    try:
        os.mkdir(folder_db)
        os.mkdir(folder_arch)
    except FileExistsError:
        pass


if __name__ == '__main__':
    argp = argparse.ArgumentParser()
    argp.add_argument("-i", required=True, metavar="report", help="input: report file")
    args = argp.parse_args()

    timestamp = str(datetime.datetime.now())
    new_scan = set()
    old_scan = set()

    folder_db = "db"
    folder_arch = "arch"

    # db.purge()

    prepare_environment()
    db = TinyDB("db/db.json")

    old_sid = read_old_scan()
    read_new_scan(args.i, old_sid)
    compare_scans()
    move_to_arch()

